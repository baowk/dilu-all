import dayjs from "dayjs";
import editForm from "../form.vue";
import { message } from "@/utils/message";
import {type {{.ClassName}}FormItemProps, get{{.ClassName}}Page, create{{.ClassName}}, update{{.ClassName}}, del{{.ClassName}} } from "@/api/{{.PackageName}}/{{.ModuleName}}";
import { addDialog } from "@/components/ReDialog";
import { type PaginationProps } from "@pureadmin/table";
import { reactive, ref, onMounted, h, toRaw } from "vue";

export function use{{.ClassName}}() {
  const qform = reactive({
    page: 1,
    pageSize: 10,
  {{- range .Columns }}
    {{- if .IsQuery -}}
    {{ .JsonField }}: null,
    {{- end}}
  {{- end }}
  });
  const formRef = ref();
  const dataList = ref([]);
  const loading = ref(true);
  //const switchLoadMap = ref({});
  //const { switchStyle } = usePublicHooks();
  const pagination = reactive<PaginationProps>({
    total: 0,
    pageSize: 10,
    currentPage: 1,
    background: true
  });
  const columns: TableColumnList = [
  {{ range .Columns }}
    {{- if .IsList }}
    {
      label: "{{.ColumnComment}}",
      prop: "{{.JsonField}}",
      minWidth: 120{{- if eq .GoType "time.Time" -}},{{- end -}}
      {{- if eq .GoType "time.Time"}}
      formatter: ({ {{.JsonField}} }) =>
        dayjs({{.JsonField}}).format("YYYY-MM-DD HH:mm:ss")
      {{- end }}
    },
    {{- end }}
  {{- end }}
    {
      label: "操作",
      fixed: "right",
      width: 140,
      slot: "operation"
    }
  ];

  function handleDelete(row) {
    del{{.ClassName}}({ ids: [row.id] }).then(res => {
      if (res.code == 200) {
        message(`删除成功`, { type: "success" });
        onSearch();
      } else {
        message(`删除失败`, { type: "error" });
      }
    });
  }

  function handleSizeChange(val: number) {
    qform.pageSize = val;
    onSearch();
  }

  function handleCurrentChange(val: number) {
    qform.page = val;
    onSearch();
  }

  function handleSelectionChange(val) {
    console.log("handleSelectionChange", val);
  }

  async function onSearch() {
    loading.value = true;
    const { code, msg, data } = await get{{.ClassName}}Page(toRaw(qform));
    if (code !== 200) {
      loading.value = false;
      message(msg, { type: "error" });
      return;
    }
    dataList.value = data.list;
    pagination.total = data.total;
    pagination.pageSize = data.pageSize;
    pagination.currentPage = data.currentPage;

    setTimeout(() => {
      loading.value = false;
    }, 500);
  }

  const resetForm = formEl => {
    if (!formEl) return;
    formEl.resetFields();
    onSearch();
  };

  function openDialog(title = "新增", row?: {{.ClassName}}FormItemProps) {
    addDialog({
      title: `${title}{{.TableComment}}`,
      props: {
        formInline: {
      {{- range .Columns }}
        {{- if eq .JsonField "createdAt" }}
        {{- else if eq .JsonField "updatedAt" }}
        {{- else if eq .JsonField "deletedAt" }}
        {{- else if eq .JsonField "createBy" }}
        {{- else if eq .JsonField "updateBy" }}
        {{- else }}
          {{ .JsonField }}: row?.{{ .JsonField }} ?? null,
        {{- end}}
      {{- end }}
        }
      },
      width: "48%",
      draggable: true,
      fullscreenIcon: true,
      closeOnClickModal: false,
      contentRenderer: () => h(editForm, { ref: formRef }),
      beforeSure: (done, { options }) => {
        const FormRef = formRef.value.getRef();
        const curData = options.props.formInline as {{.ClassName}}FormItemProps;
        FormRef.validate(valid => {
          if (valid) {
            // 表单规则校验通过
            if (title === "新增") {
              create{{.ClassName}}(curData).then(res => {
                if (res.code == 200) {
                  message(res.msg, {
                    type: "success"
                  });
                  onSearch(); // 刷新表格数据
                } else {
                  message(res.msg, {
                    type: "error"
                  });
                }
              });
            } else {
              update{{.ClassName}}(curData).then(res => {
                if (res.code == 200) {
                  message(res.msg, {
                    type: "success"
                  });
                  onSearch(); // 刷新表格数据
                } else {
                  message( res.msg, {
                    type: "error"
                  });
                }
              });
            }
            done(); // 关闭弹框
          }
        });
      }
    });
  }

  /** 数据权限 可自行开发 */
  // function handleDatabase() {}

  onMounted(() => {
    onSearch();
  });

  return {
    qform,
    loading,
    columns,
    dataList,
    pagination,
    onSearch,
    resetForm,
    openDialog,
    handleDelete,
    handleSizeChange,
    handleCurrentChange,
    handleSelectionChange
  };
}
